#BlueJ class context
comment0.params=
comment0.target=BinaryHeap()
comment0.text=\n\ Basic\ constructor\ for\ objects\ of\ class\ BinaryHeap\n
comment1.params=key
comment1.target=void\ insert(int)
comment1.text=\n\ Insert\ a\ new\ integer\ key\ into\ the\ heap.\ The\ new\ key\ is\ initially\ added\ as\ \n\ the\ last\ node\ of\ the\ heap.\ The\ item\ is\ then\ 'bubbled\ up'\ the\ heap,\ as\ \n\ necessary,\ to\ restore\ the\ heap\ order\ property.\ \n\ \n\ The\ array\ storage\ is\ doubled\ if\ necessary.\n\ \n\ @param\ key\ the\ integer\ to\ insert.\n
comment2.params=
comment2.target=int\ removeMin()
comment2.text=\n\ Remove\ the\ minimum\ elelement\ from\ the\ heap.\ Restructure\ the\ heap\ to\ \n\ restore\ the\ heap\ order\ property.\ \n\ \n\ @return\ the\ minimum\ key\n
comment3.params=
comment3.target=void\ reset()
comment4.params=node\ key
comment4.target=void\ upHeapBubble(int,\ int)
comment4.text=\n\ Internal\ method\ to\ bubble\ newly\ inserted\ key\ up\ heap\ to\ ensure\ that\ the\ heap\ order\ \n\ property\ is\ maintained.\n
comment5.params=node
comment5.target=int\ parent(int)
comment5.text=\n\ Internal\ method\ to\ calculate\ index\ of\ parent\ node\ from\ that\ of\ a\ child.\n\ Will\ return\ 0\ for\ the\ 'parent'\ of\ root.\n
comment6.params=
comment6.target=void\ downHeapBubble()
comment6.text=\n\ Internal\ method\ to\ bubble\ key\ down\ the\ heap\ to\ ensure\ the\ heap\ order\ is\ \n\ re-established\ after\ a\ removal\ operation.\n
comment7.params=index\ key
comment7.target=int\ nextIndex(int,\ int)
comment7.text=\n\ Internal\ method\ to\ identify\ where\ key\ should\ be\ placed\ to\ ensure\ local\ \n\ heap\ order\ is\ maintained.\ If\ a\ node\ has\ no\ children\ or\ no\ child\ with\ \n\ smaller\ key,\ then\ just\ return\ index.\ Otherwise,\ return\ index\ of\ child\ \n\ with\ smallest\ key.\n
comment8.params=
comment8.target=void\ doubleHeap()
comment8.text=\n\ Internal\ method\ to\ expand\ heap\ storage.\n
numComments=9
