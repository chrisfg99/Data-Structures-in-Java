#BlueJ class context
comment0.params=
comment0.target=BinaryTree()
comment0.text=\n\ Basic\ constructor\ for\ objects\ of\ class\ BinaryTree\n
comment1.params=
comment1.target=TreeNode\ root()
comment1.text=\n\ Return\ the\ root\ node\ (or\ throw\ exception\ for\ empty\ tree).\n
comment10.params=data
comment10.target=TreeNode\ addRoot(java.lang.Object)
comment10.text=\n\ Construct\ a\ new\ node\ with\ the\ given\ data\ and\ make\ this\ the\ root\ of\ the\ tree.\ An\ error\ occurs\n\ if\ the\ tree\ alreadyt\ has\ a\ node.\ \n\ @param\ data\ the\ data\ element\ of\ the\ new\ node\n\ @return\ the\ new\ node\ created\n
comment11.params=n\ data
comment11.target=TreeNode\ insertLeft(TreeNode,\ java.lang.Object)
comment11.text=\n\ Construct\ a\ new\ node\ with\ the\ given\ data\ and\ add\ it\ as\ the\ left\ child\ of\ the\ specified\ node.\ \n\ An\ error\ condition\ occurs\ in\ the\ specified\ node\ already\ has\ a\ left\ child.\n\ @param\ n\ the\ node\ specified\n\ @param\ data\ the\ data\ element\ of\ the\ new\ left\ child\ node\n\ @return\ the\ new\ left\ child\ node\n
comment12.params=n\ data
comment12.target=TreeNode\ insertRight(TreeNode,\ java.lang.Object)
comment12.text=\n\ Construct\ a\ new\ node\ with\ the\ given\ data\ and\ add\ it\ as\ the\ right\ child\ of\ the\ specified\ node.\ \n\ An\ error\ condition\ occurs\ in\ the\ specified\ node\ already\ has\ a\ right\ child.\n\ @param\ n\ the\ node\ specified\n\ @param\ data\ the\ data\ element\ of\ the\ new\ right\ child\ node\n\ @return\ the\ new\ right\ child\ node\n
comment13.params=n
comment13.target=java.lang.String\ preorder(TreeNode)
comment13.text=\n\ Perform\ a\ preorder\ traversal\ of\ the\ tree\ rooted\ at\ node\ n.\ Return\ a\ String\ representing\ \n\ the\ data\ elements\ of\ each\ node\ in\ the\ order\ they\ are\ visited.\n\ @param\ n\ the\ node\ from\ which\ the\ traversal\ starts.\ \n\ @return\ a\ String\ representation\ of\ the\ data\ elements\ of\ the\ nodes\ visited\ in\ preorder\n
comment2.params=n
comment2.target=boolean\ isLeaf(TreeNode)
comment2.text=\n\ Check\ whether\ a\ node\ is\ a\ leaf\ of\ not.\n\ @param\ n\ the\ node\ to\ check\n\ @return\ true\ if\ the\ node\ is\ a\ leaf;\ false\ otherwise\n
comment3.params=n
comment3.target=boolean\ isRoot(TreeNode)
comment3.text=\n\ Check\ whether\ a\ node\ is\ the\ root\ of\ the\ tree\n\ @param\ n\ the\ node\ to\ check\n\ @return\ true\ if\ the\ node\ is\ the\ root;\ false\ otherwise\n
comment4.params=
comment4.target=boolean\ isEmpty()
comment4.text=\n\ Check\ whether\ the\ tree\ is\ empty\n\ @return\ true\ if\ the\ tree\ is\ empty\ (has\ no\ nodes);\ false\ otherwise\n
comment5.params=n
comment5.target=boolean\ hasLeft(TreeNode)
comment5.text=\n\ Check\ that\ a\ node\ has\ a\ left\ child\n\ @param\ n\ the\ node\ to\ be\ checked\n\ @return\ true\ if\ the\ left\ child\ exists;\ false\ otherwise\n
comment6.params=n
comment6.target=boolean\ hasRight(TreeNode)
comment6.text=\n\ Check\ that\ a\ node\ has\ a\ right\ child\n\ @param\ n\ the\ node\ to\ be\ checked\n\ @return\ true\ if\ the\ right\ child\ exists;\ false\ otherwise\n
comment7.params=n
comment7.target=TreeNode\ getLeft(TreeNode)
comment7.text=\n\ Get\ the\ left\ child\ of\ a\ given\ node\ (or\ throw\ an\ exception\ if\ it\ doesn't\ exist)\n\ @param\ n\ the\ given\ node\n\ @return\ a\ tree\ node\ \n
comment8.params=n
comment8.target=TreeNode\ getRight(TreeNode)
comment8.text=\n\ Get\ the\ right\ child\ of\ a\ given\ node\ (or\ throw\ an\ exception\ if\ it\ doesn't\ exist)\n\ @param\ n\ the\ given\ node\n\ @return\ a\ tree\ node\ \n
comment9.params=n
comment9.target=TreeNode\ getParent(TreeNode)
comment9.text=\n\ Get\ the\ parent\ of\ a\ given\ node\ (or\ throw\ an\ exception\ if\ the\ given\ node\ is\ the\ root)\n\ @param\ n\ the\ given\ node\n\ @return\ a\ tree\ node\ \n
numComments=14
