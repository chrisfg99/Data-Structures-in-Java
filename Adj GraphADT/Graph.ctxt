#BlueJ class context
comment0.target=Graph
comment1.params=inVertices\ inEdges
comment1.target=Graph(java.util.ArrayList,\ java.util.ArrayList)
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ Graph\r\n
comment10.params=
comment10.target=java.util.ArrayList\ edges()
comment10.text=\r\n\ Get\ a\ list\ of\ all\ the\ edges\r\n
comment11.params=verName\ newName
comment11.target=java.lang.String\ rename(Vertex,\ java.lang.String)
comment11.text=\r\n\ Rename\ a\ particular\ vertex\r\n
comment12.params=edgeLabel\ newName
comment12.target=java.lang.String\ rename(Edge,\ java.lang.String)
comment12.text=\r\n\ Rename\ a\ particular\ edge\r\n
comment13.params=verName
comment13.target=java.util.ArrayList\ incidentEdges(Vertex)
comment13.text=\r\n\ Gives\ any\ incident\ edges\ of\ a\ given\ vertex\r\n
comment14.params=v
comment14.target=void\ bftraverse(Vertex)
comment14.text=\r\n\ Perform\ a\ breadth-first\ traversal\ of\ the\ rail\ network,\ starting\ from\ a\ given\ station.\r\n
comment15.params=
comment15.target=void\ bftraverse()
comment15.text=\r\n\ Perform\ a\ breadth-first\ traversal\ of\ the\ whole\ rail\ network\r\n
comment16.params=v
comment16.target=java.util.ArrayList\ allReachable(Vertex)
comment16.text=\r\n\ Return\ a\ list\ of\ all\ of\ the\ stations\ (vertices)\ that\ can\ be\ reached\ by\ rail\ when\ starting\ from\ v\r\n
comment17.params=
comment17.target=boolean\ allConnected()
comment17.text=\r\n\ Return\ true\ if\ all\ the\ stations\ in\ the\ entire\ rail\ network\ can\ be\ reached\ from\ one\ another,\ and\ otherwise,\ return\ false\r\n
comment18.params=u\ v
comment18.target=java.util.ArrayList\ mostDirectRoute(Vertex,\ Vertex)
comment18.text=\r\n\ Given\ two\ stations\ u\ and\ v,\ return\ a\ shortest\ route\ (path)\ between\ them\ else\ return\ null\r\n
comment2.params=
comment2.target=Graph()
comment2.text=\r\n\ Constructor\ to\ create\ an\ empty\ graph\r\n
comment3.params=verName1\ verName2
comment3.target=boolean\ areAdjacent(Vertex,\ Vertex)
comment3.text=\r\n\ Checks\ if\ two\ vertices\ are\ adjacent\r\n
comment4.params=edgeName\ verName
comment4.target=Vertex\ opposite(Edge,\ Vertex)
comment4.text=\r\n\ Get\ adjacent\ vertices\r\n
comment5.params=verName
comment5.target=Vertex\ insertVertex(java.lang.String)
comment5.text=\r\n\ Add\ vertex\ to\ ArrayList\r\n
comment6.params=v
comment6.target=java.lang.String\ removeVertex(Vertex)
comment6.text=\r\n\ Remove\ vertex\ from\ ArrayList\r\n
comment7.params=v\ w\ n
comment7.target=Edge\ insertEdge(Vertex,\ Vertex,\ java.lang.String)
comment7.text=\r\n\ Add\ an\ edge\r\n
comment8.params=edgeLabel
comment8.target=java.lang.String\ removeEdge(Edge)
comment8.text=\r\n\ Remove\ an\ edge\r\n
comment9.params=
comment9.target=java.util.ArrayList\ vertices()
comment9.text=\r\n\ Get\ a\ list\ of\ all\ the\ vertices\r\n
numComments=19
